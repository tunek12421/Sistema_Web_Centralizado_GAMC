#!/bin/bash

# ========================================
# SCRIPT DE TESTING COMPLETO - SISTEMA DE MENSAJERIA
# Descripci√≥n: Prueba integral del flujo de mensajer√≠a con diferentes roles de usuario
# Autor: Sistema Web Centralizado GAMC
# ========================================

echo "========================================="
echo "üöÄ SISTEMA DE TESTING - FLUJO MENSAJERIA"
echo "========================================="
echo "Este script prueba todo el sistema de mensajer√≠a:"
echo "- Creaci√≥n de usuarios con diferentes roles (INPUT, OUTPUT, ADMIN)"
echo "- Operaciones CRUD de mensajes seg√∫n permisos"
echo "- Validaci√≥n de restricciones de seguridad"
echo "- Estad√≠sticas y reporting del sistema"
echo ""

# Funci√≥n para mostrar separadores
print_section() {
    echo ""
    echo "========================================="
    echo "üìã $1"
    echo "========================================="
}

# Funci√≥n para mostrar detalles de respuesta
show_response_details() {
    local response="$1"
    local title="$2"
    echo "üìä Detalles de la respuesta ($title):"
    echo "$response" | jq '.' 2>/dev/null || echo "$response"
    echo ""
}

# Funci√≥n para validar respuesta exitosa
validate_success() {
    local response="$1"
    local description="$2"
    
    local success=$(echo "$response" | jq -r '.success // false' 2>/dev/null)
    if [ "$success" = "true" ]; then
        echo "‚úÖ $description - EXITOSO"
        return 0
    else
        echo "‚ùå $description - FALL√ì"
        echo "Error: $(echo "$response" | jq -r '.message // "Respuesta inv√°lida"')"
        return 1
    fi
}

print_section "FASE 1: PREPARACI√ìN DEL ENTORNO DE TESTING"

echo "üîß Configurando usuarios de prueba con diferentes roles..."
echo ""
echo "üìù ROLES DEL SISTEMA:"
echo "   ‚Ä¢ INPUT: Puede crear y enviar mensajes"
echo "   ‚Ä¢ OUTPUT: Puede leer y gestionar mensajes recibidos"
echo "   ‚Ä¢ ADMIN: Acceso completo + estad√≠sticas del sistema"
echo ""

# Generar IDs √∫nicos para evitar conflictos
inputUserId=$((RANDOM % 1000 + 7000))
outputUserId=$((RANDOM % 1000 + 8000))
adminUserId=$((RANDOM % 1000 + 9000))

echo "üÜî IDs generados para esta sesi√≥n:"
echo "   ‚Ä¢ Usuario INPUT: $inputUserId"
echo "   ‚Ä¢ Usuario OUTPUT: $outputUserId"
echo "   ‚Ä¢ Usuario ADMIN: $adminUserId"
echo ""

# ========================================
# CREACI√ìN DE USUARIOS
# ========================================

print_section "FASE 2: REGISTRO DE USUARIOS"

# Usuario INPUT
echo "üë§ Registrando Usuario INPUT (Creador de mensajes)..."
inputUserBody=$(cat <<EOF
{
    "email": "input${inputUserId}@gamc.gov.bo",
    "password": "InputTest123!",
    "firstName": "Usuario",
    "lastName": "Input${inputUserId}",
    "organizationalUnitId": 1,
    "role": "input"
}
EOF
)

echo "üì§ Enviando datos de registro INPUT..."
inputRegisterResponse=$(curl -s -X POST \
    "http://localhost:3000/api/v1/auth/register" \
    -H "Content-Type: application/json" \
    -d "$inputUserBody")

if validate_success "$inputRegisterResponse" "Registro usuario INPUT"; then
    echo "üìß Email registrado: input${inputUserId}@gamc.gov.bo"
    echo "üè¢ Unidad organizacional: 1 (Obras P√∫blicas)"
    echo "üîê Rol asignado: INPUT"
    
    # Login INPUT
    echo ""
    echo "üîê Autenticando usuario INPUT..."
    inputLoginBody=$(cat <<EOF
{
    "email": "input${inputUserId}@gamc.gov.bo",
    "password": "InputTest123!"
}
EOF
)
    
    inputLoginResponse=$(curl -s -X POST \
        "http://localhost:3000/api/v1/auth/login" \
        -H "Content-Type: application/json" \
        -d "$inputLoginBody")
    
    inputToken=$(echo "$inputLoginResponse" | jq -r '.data.accessToken')
    
    if [ "$inputToken" != "null" ] && [ "$inputToken" != "" ]; then
        echo "‚úÖ Usuario INPUT autenticado exitosamente"
        echo "üé´ Token generado: ${inputToken:0:20}..."
        inputUserId_final=$(echo "$inputLoginResponse" | jq -r '.data.user.id')
        echo "üÜî ID de usuario: $inputUserId_final"
    else
        echo "‚ùå Error en autenticaci√≥n INPUT"
        exit 1
    fi
else
    echo "‚ùå Fallo cr√≠tico en registro INPUT"
    exit 1
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Usuario OUTPUT
echo "üë§ Registrando Usuario OUTPUT (Receptor de mensajes)..."
outputUserBody=$(cat <<EOF
{
    "email": "output${outputUserId}@gamc.gov.bo",
    "password": "OutputTest123!",
    "firstName": "Usuario",
    "lastName": "Output${outputUserId}",
    "organizationalUnitId": 2,
    "role": "output"
}
EOF
)

echo "üì§ Enviando datos de registro OUTPUT..."
outputRegisterResponse=$(curl -s -X POST \
    "http://localhost:3000/api/v1/auth/register" \
    -H "Content-Type: application/json" \
    -d "$outputUserBody")

if validate_success "$outputRegisterResponse" "Registro usuario OUTPUT"; then
    echo "üìß Email registrado: output${outputUserId}@gamc.gov.bo"
    echo "üè¢ Unidad organizacional: 2 (Finanzas)"
    echo "üîê Rol asignado: OUTPUT"
    
    # Login OUTPUT
    echo ""
    echo "üîê Autenticando usuario OUTPUT..."
    outputLoginBody=$(cat <<EOF
{
    "email": "output${outputUserId}@gamc.gov.bo",
    "password": "OutputTest123!"
}
EOF
)
    
    outputLoginResponse=$(curl -s -X POST \
        "http://localhost:3000/api/v1/auth/login" \
        -H "Content-Type: application/json" \
        -d "$outputLoginBody")
    
    outputToken=$(echo "$outputLoginResponse" | jq -r '.data.accessToken')
    
    if [ "$outputToken" != "null" ] && [ "$outputToken" != "" ]; then
        echo "‚úÖ Usuario OUTPUT autenticado exitosamente"
        echo "üé´ Token generado: ${outputToken:0:20}..."
        outputUserId_final=$(echo "$outputLoginResponse" | jq -r '.data.user.id')
        echo "üÜî ID de usuario: $outputUserId_final"
    else
        echo "‚ùå Error en autenticaci√≥n OUTPUT"
        exit 1
    fi
else
    echo "‚ùå Fallo cr√≠tico en registro OUTPUT"
    exit 1
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Usuario ADMIN
echo "üë§ Registrando Usuario ADMIN (Administrador del sistema)..."
adminUserBody=$(cat <<EOF
{
    "email": "admin${adminUserId}@gamc.gov.bo",
    "password": "AdminTest123!",
    "firstName": "Usuario",
    "lastName": "Admin${adminUserId}",
    "organizationalUnitId": 1,
    "role": "admin"
}
EOF
)

echo "üì§ Enviando datos de registro ADMIN..."
adminRegisterResponse=$(curl -s -X POST \
    "http://localhost:3000/api/v1/auth/register" \
    -H "Content-Type: application/json" \
    -d "$adminUserBody")

if validate_success "$adminRegisterResponse" "Registro usuario ADMIN"; then
    echo "üìß Email registrado: admin${adminUserId}@gamc.gov.bo"
    echo "üè¢ Unidad organizacional: 1 (Obras P√∫blicas)"
    echo "üîê Rol asignado: ADMIN"
    
    # Login ADMIN
    echo ""
    echo "üîê Autenticando usuario ADMIN..."
    adminLoginBody=$(cat <<EOF
{
    "email": "admin${adminUserId}@gamc.gov.bo",
    "password": "AdminTest123!"
}
EOF
)
    
    adminLoginResponse=$(curl -s -X POST \
        "http://localhost:3000/api/v1/auth/login" \
        -H "Content-Type: application/json" \
        -d "$adminLoginBody")
    
    adminToken=$(echo "$adminLoginResponse" | jq -r '.data.accessToken')
    
    if [ "$adminToken" != "null" ] && [ "$adminToken" != "" ]; then
        echo "‚úÖ Usuario ADMIN autenticado exitosamente"
        echo "üé´ Token generado: ${adminToken:0:20}..."
        adminUserId_final=$(echo "$adminLoginResponse" | jq -r '.data.user.id')
        echo "üÜî ID de usuario: $adminUserId_final"
    else
        echo "‚ùå Error en autenticaci√≥n ADMIN"
        exit 1
    fi
else
    echo "‚ùå Fallo cr√≠tico en registro ADMIN"
    exit 1
fi

print_section "FASE 3: EXPLORACI√ìN DEL SISTEMA"

echo "üìã Obteniendo configuraci√≥n del sistema de mensajer√≠a..."
echo ""

# ========================================
# OBTENER TIPOS DE MENSAJES
# ========================================
echo "üè∑Ô∏è CONSULTANDO TIPOS DE MENSAJES DISPONIBLES"
echo "Endpoint: GET /api/v1/messages/types"
echo "Usuario: INPUT (token requerido)"
echo ""

typesResponse=$(curl -s -X GET \
    "http://localhost:3000/api/v1/messages/types" \
    -H "Authorization: Bearer $inputToken")

if validate_success "$typesResponse" "Consulta tipos de mensajes"; then
    echo "üìù TIPOS DE MENSAJES CONFIGURADOS:"
    typesData=$(echo "$typesResponse" | jq -r '.data[]')
    counter=1
    while IFS= read -r type; do
        [ -n "$type" ] && echo "   $counter. $type"
        ((counter++))
    done <<< "$typesData"
    
    totalTypes=$(echo "$typesResponse" | jq -r '.data | length')
    echo ""
    echo "üìä Total de tipos configurados: $totalTypes"
else
    echo "‚ùå No se pudieron obtener los tipos de mensajes"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# OBTENER ESTADOS DE MENSAJES
# ========================================
echo "üìä CONSULTANDO ESTADOS DE MENSAJES DISPONIBLES"
echo "Endpoint: GET /api/v1/messages/statuses"
echo "Usuario: INPUT (token requerido)"
echo ""

statusesResponse=$(curl -s -X GET \
    "http://localhost:3000/api/v1/messages/statuses" \
    -H "Authorization: Bearer $inputToken")

if validate_success "$statusesResponse" "Consulta estados de mensajes"; then
    echo "üîÑ ESTADOS DE MENSAJES CONFIGURADOS:"
    statusesData=$(echo "$statusesResponse" | jq -r '.data[]')
    counter=1
    while IFS= read -r status; do
        [ -n "$status" ] && echo "   $counter. $status"
        ((counter++))
    done <<< "$statusesData"
    
    totalStatuses=$(echo "$statusesResponse" | jq -r '.data | length')
    echo ""
    echo "üìä Total de estados configurados: $totalStatuses"
else
    echo "‚ùå No se pudieron obtener los estados de mensajes"
fi

print_section "FASE 4: OPERACIONES DE MENSAJER√çA"

# ========================================
# CREAR MENSAJE
# ========================================
echo "üìù CREANDO NUEVO MENSAJE"
echo "Endpoint: POST /api/v1/messages"
echo "Usuario: INPUT (√∫nico rol autorizado para crear)"
echo "Destino: Unidad 2 (Finanzas)"
echo ""

messageBody=$(cat <<EOF
{
    "subject": "Solicitud de Informaci√≥n Presupuestaria - Test ${inputUserId}",
    "content": "Estimados colegas de Finanzas,\n\nSolicito informaci√≥n detallada sobre el presupuesto asignado para el proyecto de mejoramiento de infraestructura vial. Esta informaci√≥n es requerida para continuar con la planificaci√≥n de actividades del pr√≥ximo trimestre.\n\nAdjunto encontrar√°n los documentos de referencia necesarios.\n\nSaludos cordiales,\nUnidad de Obras P√∫blicas",
    "receiverUnitId": 2,
    "messageTypeId": 1,
    "priorityLevel": 2,
    "isUrgent": true
}
EOF
)

echo "üì§ Datos del mensaje a enviar:"
echo "$messageBody" | jq '.'
echo ""

createResponse=$(curl -s -X POST \
    "http://localhost:3000/api/v1/messages" \
    -H "Authorization: Bearer $inputToken" \
    -H "Content-Type: application/json" \
    -d "$messageBody")

if validate_success "$createResponse" "Creaci√≥n de mensaje"; then
    messageId=$(echo "$createResponse" | jq -r '.data.id')
    messageSubject=$(echo "$createResponse" | jq -r '.data.subject')
    messageStatus=$(echo "$createResponse" | jq -r '.data.status')
    messageUrgent=$(echo "$createResponse" | jq -r '.data.isUrgent')
    messageCreatedAt=$(echo "$createResponse" | jq -r '.data.createdAt')
    
    echo "üìã DETALLES DEL MENSAJE CREADO:"
    echo "   üÜî ID: $messageId"
    echo "   üìß Asunto: $messageSubject"
    echo "   üìä Estado inicial: $messageStatus"
    echo "   üö® Urgente: $messageUrgent"
    echo "   üïê Creado: $messageCreatedAt"
    echo "   üë§ Remitente: input${inputUserId}@gamc.gov.bo"
    echo "   üè¢ Unidad destino: 2 (Finanzas)"
    
    echo ""
    show_response_details "$createResponse" "Mensaje creado"
else
    echo "‚ùå Fallo cr√≠tico en creaci√≥n de mensaje"
    messageId=""
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# LISTAR MENSAJES
# ========================================
echo "üìã LISTANDO MENSAJES (VISTA OUTPUT)"
echo "Endpoint: GET /api/v1/messages"
echo "Usuario: OUTPUT (puede ver mensajes de su unidad)"
echo "Par√°metros: page=1, limit=10, orden=descendente por fecha"
echo ""

listResponse=$(curl -s -X GET \
    "http://localhost:3000/api/v1/messages?page=1&limit=10&sortBy=created_at&sortOrder=desc" \
    -H "Authorization: Bearer $outputToken")

if validate_success "$listResponse" "Listado de mensajes"; then
    totalMessages=$(echo "$listResponse" | jq -r '.data.total')
    currentPage=$(echo "$listResponse" | jq -r '.data.page')
    limitPerPage=$(echo "$listResponse" | jq -r '.data.limit')
    totalPages=$(echo "$listResponse" | jq -r '.data.totalPages')
    messagesCount=$(echo "$listResponse" | jq -r '.data.messages | length')
    
    echo "üìä INFORMACI√ìN DE PAGINACI√ìN:"
    echo "   üìÑ P√°gina actual: $currentPage de $totalPages"
    echo "   üìù Mensajes por p√°gina: $limitPerPage"
    echo "   üìà Total de mensajes: $totalMessages"
    echo "   üî¢ Mensajes en esta p√°gina: $messagesCount"
    echo ""
    
    if [ "$messagesCount" -gt 0 ]; then
        echo "üì® MENSAJES ENCONTRADOS:"
        echo "$listResponse" | jq -r '.data.messages[] | "   ‚Ä¢ ID: \(.id) | \(.subject) | Estado: \(.status) | \(.createdAt)"'
        
        latestMessage=$(echo "$listResponse" | jq -r '.data.messages[0].subject')
        echo ""
        echo "üÜï Mensaje m√°s reciente: $latestMessage"
    else
        echo "üì≠ No hay mensajes en esta p√°gina"
    fi
    
    echo ""
    show_response_details "$listResponse" "Lista de mensajes"
else
    echo "‚ùå Error al listar mensajes"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# OBTENER MENSAJE ESPEC√çFICO
# ========================================
if [ "$messageId" != "" ] && [ "$messageId" != "null" ]; then
    echo "üîç CONSULTANDO MENSAJE ESPEC√çFICO"
    echo "Endpoint: GET /api/v1/messages/$messageId"
    echo "Usuario: OUTPUT (puede leer mensajes de su unidad)"
    echo "ID del mensaje: $messageId"
    echo ""
    
    getResponse=$(curl -s -X GET \
        "http://localhost:3000/api/v1/messages/$messageId" \
        -H "Authorization: Bearer $outputToken")
    
    if validate_success "$getResponse" "Consulta mensaje espec√≠fico"; then
        # Extraer datos detallados
        msgId=$(echo "$getResponse" | jq -r '.data.id')
        msgSubject=$(echo "$getResponse" | jq -r '.data.subject')
        msgContent=$(echo "$getResponse" | jq -r '.data.content')
        msgStatus=$(echo "$getResponse" | jq -r '.data.status')
        msgPriority=$(echo "$getResponse" | jq -r '.data.priorityLevel')
        msgUrgent=$(echo "$getResponse" | jq -r '.data.isUrgent')
        msgCreatedAt=$(echo "$getResponse" | jq -r '.data.createdAt')
        msgReadAt=$(echo "$getResponse" | jq -r '.data.readAt')
        
        # Datos del remitente
        senderName=$(echo "$getResponse" | jq -r '.data.sender.firstName + " " + .data.sender.lastName')
        senderEmail=$(echo "$getResponse" | jq -r '.data.sender.email')
        senderUnit=$(echo "$getResponse" | jq -r '.data.senderUnit.name')
        
        # Datos del receptor
        receiverUnit=$(echo "$getResponse" | jq -r '.data.receiverUnit.name')
        
        echo "üìã DETALLES COMPLETOS DEL MENSAJE:"
        echo "   üÜî ID: $msgId"
        echo "   üìß Asunto: $msgSubject"
        echo "   üìä Estado: $msgStatus"
        echo "   ‚≠ê Prioridad: $msgPriority/5"
        echo "   üö® Urgente: $msgUrgent"
        echo "   üïê Creado: $msgCreatedAt"
        echo "   üëÅÔ∏è Le√≠do: $msgReadAt"
        echo ""
        echo "üë§ INFORMACI√ìN DEL REMITENTE:"
        echo "   üìõ Nombre: $senderName"
        echo "   üìß Email: $senderEmail"
        echo "   üè¢ Unidad: $senderUnit"
        echo ""
        echo "üéØ INFORMACI√ìN DEL RECEPTOR:"
        echo "   üè¢ Unidad destino: $receiverUnit"
        echo ""
        echo "üìÑ CONTENIDO DEL MENSAJE:"
        echo "   ${msgContent:0:100}..."
        echo ""
        
        show_response_details "$getResponse" "Mensaje completo"
    else
        echo "‚ùå Error al obtener el mensaje espec√≠fico"
    fi
else
    echo "‚ö†Ô∏è No hay ID de mensaje v√°lido para consultar"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# MARCAR COMO LE√çDO
# ========================================
if [ "$messageId" != "" ] && [ "$messageId" != "null" ]; then
    echo "üëÅÔ∏è MARCANDO MENSAJE COMO LE√çDO"
    echo "Endpoint: PUT /api/v1/messages/$messageId/read"
    echo "Usuario: OUTPUT (receptor del mensaje)"
    echo "Acci√≥n: Actualizar timestamp de lectura"
    echo ""
    
    readResponse=$(curl -s -X PUT \
        "http://localhost:3000/api/v1/messages/$messageId/read" \
        -H "Authorization: Bearer $outputToken")
    
    if validate_success "$readResponse" "Marcar mensaje como le√≠do"; then
        readMessage=$(echo "$readResponse" | jq -r '.message')
        readTimestamp=$(echo "$readResponse" | jq -r '.data.readAt // "No disponible"')
        
        echo "‚úÖ $readMessage"
        echo "üïê Timestamp de lectura: $readTimestamp"
        echo "üìä El mensaje ahora aparece como 'le√≠do' en el sistema"
        
        echo ""
        show_response_details "$readResponse" "Mensaje marcado como le√≠do"
    else
        echo "‚ùå Error al marcar el mensaje como le√≠do"
    fi
else
    echo "‚ö†Ô∏è No hay ID de mensaje v√°lido para marcar como le√≠do"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# ACTUALIZAR ESTADO
# ========================================
if [ "$messageId" != "" ] && [ "$messageId" != "null" ]; then
    echo "üîÑ ACTUALIZANDO ESTADO DEL MENSAJE"
    echo "Endpoint: PUT /api/v1/messages/$messageId/status"
    echo "Usuario: OUTPUT (responsable de gestionar el mensaje)"
    echo "Estado anterior: SENT ‚Üí Estado nuevo: IN_PROGRESS"
    echo ""
    
    updateStatusBody=$(cat <<EOF
{
    "status": "IN_PROGRESS"
}
EOF
)
    
    echo "üì§ Datos de actualizaci√≥n:"
    echo "$updateStatusBody" | jq '.'
    echo ""
    
    updateResponse=$(curl -s -X PUT \
        "http://localhost:3000/api/v1/messages/$messageId/status" \
        -H "Authorization: Bearer $outputToken" \
        -H "Content-Type: application/json" \
        -d "$updateStatusBody")
    
    if validate_success "$updateResponse" "Actualizaci√≥n de estado"; then
        updateMessage=$(echo "$updateResponse" | jq -r '.message')
        newStatus=$(echo "$updateResponse" | jq -r '.data.status // "No disponible"')
        
        echo "‚úÖ $updateMessage"
        echo "üìä Estado actual: $newStatus"
        echo "üìà El mensaje ahora est√° marcado como 'en progreso'"
        echo "üîî Esto indica que el receptor est√° trabajando en la solicitud"
        
        echo ""
        show_response_details "$updateResponse" "Estado actualizado"
    else
        echo "‚ùå Error al actualizar el estado del mensaje"
    fi
else
    echo "‚ö†Ô∏è No hay ID de mensaje v√°lido para actualizar estado"
fi

print_section "FASE 5: AN√ÅLISIS Y ESTAD√çSTICAS"

# ========================================
# ESTAD√çSTICAS
# ========================================
echo "üìä OBTENIENDO ESTAD√çSTICAS DEL SISTEMA"
echo "Endpoint: GET /api/v1/messages/stats"
echo "Usuario: ADMIN (√∫nico rol con acceso a estad√≠sticas)"
echo "Prop√≥sito: Monitoreo y an√°lisis del sistema de mensajer√≠a"
echo ""

statsResponse=$(curl -s -X GET \
    "http://localhost:3000/api/v1/messages/stats" \
    -H "Authorization: Bearer $adminToken")

if validate_success "$statsResponse" "Consulta de estad√≠sticas"; then
    totalMessages=$(echo "$statsResponse" | jq -r '.data.totalMessages')
    urgentMessages=$(echo "$statsResponse" | jq -r '.data.urgentMessages')
    avgResponseTime=$(echo "$statsResponse" | jq -r '.data.averageResponseTime')
    
    echo "üìà ESTAD√çSTICAS GENERALES DEL SISTEMA:"
    echo "   üìß Total de mensajes: $totalMessages"
    echo "   üö® Mensajes urgentes: $urgentMessages"
    echo "   ‚è±Ô∏è Tiempo promedio de respuesta: $avgResponseTime horas"
    echo ""
    
    echo "üìä DISTRIBUCI√ìN POR ESTADOS:"
    echo "$statsResponse" | jq -r '.data.messagesByStatus | to_entries[] | "   ‚Ä¢ \(.key): \(.value) mensajes"'
    
    # Calcular porcentajes si hay mensajes
    if [ "$totalMessages" -gt 0 ]; then
        urgentPercentage=$(echo "scale=1; $urgentMessages * 100 / $totalMessages" | bc 2>/dev/null || echo "N/A")
        echo ""
        echo "üìã AN√ÅLISIS R√ÅPIDO:"
        echo "   üö® Porcentaje de mensajes urgentes: ${urgentPercentage}%"
        
        if [ "$avgResponseTime" != "0" ]; then
            echo "   ‚ö° El sistema est√° procesando mensajes activamente"
        else
            echo "   ‚è≥ Muchos mensajes est√°n pendientes de respuesta"
        fi
    fi
    
    echo ""
    show_response_details "$statsResponse" "Estad√≠sticas completas"
else
    echo "‚ùå Error al obtener estad√≠sticas del sistema"
fi

print_section "FASE 6: LIMPIEZA Y TESTING DE ERRORES"

# ========================================
# ELIMINAR MENSAJE
# ========================================
if [ "$messageId" != "" ] && [ "$messageId" != "null" ]; then
    echo "üóëÔ∏è ELIMINANDO MENSAJE (SOFT DELETE)"
    echo "Endpoint: DELETE /api/v1/messages/$messageId"
    echo "Usuario: INPUT (creador del mensaje)"
    echo "Tipo: Eliminaci√≥n l√≥gica (no f√≠sica)"
    echo ""
    
    deleteResponse=$(curl -s -X DELETE \
        "http://localhost:3000/api/v1/messages/$messageId" \
        -H "Authorization: Bearer $inputToken")
    
    if validate_success "$deleteResponse" "Eliminaci√≥n de mensaje"; then
        deleteMessage=$(echo "$deleteResponse" | jq -r '.message')
        
        echo "‚úÖ $deleteMessage"
        echo "üìù El mensaje ha sido marcado como eliminado"
        echo "üíæ Los datos se conservan en la base de datos para auditoria"
        echo "üö´ El mensaje ya no aparecer√° en listados normales"
        
        echo ""
        show_response_details "$deleteResponse" "Mensaje eliminado"
    else
        echo "‚ùå Error al eliminar el mensaje"
    fi
else
    echo "‚ö†Ô∏è No hay ID de mensaje v√°lido para eliminar"
fi

print_section "FASE 7: TESTING DE SEGURIDAD Y VALIDACIONES"

echo "üîí Probando restricciones de seguridad y validaciones del sistema..."
echo ""

# ========================================
# TEST 1: OUTPUT intentando crear mensaje
# ========================================
echo "üß™ TEST 1: Usuario OUTPUT intentando crear mensaje"
echo "Expectativa: DEBE FALLAR (rol OUTPUT no puede crear mensajes)"
echo ""

forbiddenBody=$(cat <<EOF
{
    "subject": "Mensaje no autorizado",
    "content": "Este mensaje no deber√≠a poder crearse",
    "receiverUnitId": 1,
    "messageTypeId": 1,
    "priorityLevel": 1,
    "isUrgent": false
}
EOF
)

echo "üì§ Intentando crear mensaje con usuario OUTPUT..."
forbiddenResponse=$(curl -s -w "%{http_code}" -X POST \
    "http://localhost:3000/api/v1/messages" \
    -H "Authorization: Bearer $outputToken" \
    -H "Content-Type: application/json" \
    -d "$forbiddenBody" \
    -o /tmp/forbidden_response.json)

httpCode="${forbiddenResponse: -3}"
if [ "$httpCode" != "200" ] && [ "$httpCode" != "201" ]; then
    echo "‚úÖ SEGURIDAD VALIDADA: HTTP $httpCode"
    echo "üîí El sistema correctamente bloque√≥ la acci√≥n no autorizada"
    errorMsg=$(cat /tmp/forbidden_response.json | jq -r '.message // "Sin mensaje de error"' 2>/dev/null)
    echo "üìã Mensaje de error: $errorMsg"
else
    echo "‚ùå FALLO DE SEGURIDAD: El usuario OUTPUT pudo crear un mensaje"
    echo "üö® ESTO ES UN PROBLEMA CR√çTICO DE SEGURIDAD"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# TEST 2: Acceso sin autenticaci√≥n
# ========================================
echo "üß™ TEST 2: Intento de acceso sin autenticaci√≥n"
echo "Expectativa: DEBE FALLAR (token requerido)"
echo ""

echo "üì§ Intentando listar mensajes sin token de autenticaci√≥n..."
noAuthResponse=$(curl -s -w "%{http_code}" -X GET \
    "http://localhost:3000/api/v1/messages" \
    -o /tmp/noauth_response.json)

httpCode="${noAuthResponse: -3}"
if [ "$httpCode" = "401" ]; then
    echo "‚úÖ AUTENTICACI√ìN VALIDADA: HTTP $httpCode"
    echo "üîí El sistema correctamente requiere autenticaci√≥n"
    errorMsg=$(cat /tmp/noauth_response.json | jq -r '.message // "Sin mensaje de error"' 2>/dev/null)
    echo "üìã Mensaje de error: $errorMsg"
else
    echo "‚ùå FALLO DE AUTENTICACI√ìN: Acceso permitido sin token"
    echo "üö® ESTO ES UN PROBLEMA CR√çTICO DE SEGURIDAD"
fi

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# ========================================
# TEST 3: Mensaje inexistente
# ========================================
echo "üß™ TEST 3: Consulta de mensaje inexistente"
echo "Expectativa: DEBE FALLAR (ID no existe)"
echo ""

echo "üì§ Intentando consultar mensaje con ID inexistente (99999)..."
notFoundResponse=$(curl -s -w "%{http_code}" -X GET \
    "http://localhost:3000/api/v1/messages/99999" \
    -H "Authorization: Bearer $outputToken" \
    -o /tmp/notfound_response.json)

httpCode="${notFoundResponse: -3}"
if [ "$httpCode" = "404" ]; then
    echo "‚úÖ VALIDACI√ìN EXITOSA: HTTP $httpCode"
    echo "üîç El sistema correctamente maneja recursos inexistentes"
    errorMsg=$(cat /tmp/notfound_response.json | jq -r '.message // "Sin mensaje de error"' 2>/dev/null)
    echo "üìã Mensaje de error: $errorMsg"
else
    echo "‚ùå VALIDACI√ìN FALLIDA: Respuesta inesperada para recurso inexistente"
fi

print_section "RESUMEN EJECUTIVO"

echo "üìä RESULTADOS DEL TESTING COMPLETO:"
echo ""
echo "‚úÖ FUNCIONALIDADES PROBADAS EXITOSAMENTE:"
echo "   ‚Ä¢ Registro y autenticaci√≥n de usuarios"
echo "   ‚Ä¢ Creaci√≥n de mensajes (rol INPUT)"
echo "   ‚Ä¢ Listado y consulta de mensajes (rol OUTPUT)"
echo "   ‚Ä¢ Actualizaci√≥n de estados de mensajes"
echo "   ‚Ä¢ Marcado de mensajes como le√≠dos"
echo "   ‚Ä¢ Consulta de estad√≠sticas (rol ADMIN)"
echo "   ‚Ä¢ Eliminaci√≥n l√≥gica de mensajes"
echo ""
echo "üîí VALIDACIONES DE SEGURIDAD:"
echo "   ‚Ä¢ Control de acceso por roles ‚úÖ"
echo "   ‚Ä¢ Autenticaci√≥n obligatoria ‚úÖ"
echo "   ‚Ä¢ Manejo de recursos inexistentes ‚úÖ"
echo ""
echo "üìà ESTAD√çSTICAS DE SESI√ìN:"
echo "   ‚Ä¢ Usuarios creados: 3 (INPUT, OUTPUT, ADMIN)"
echo "   ‚Ä¢ Mensajes procesados: 1"
echo "   ‚Ä¢ Endpoints probados: 9"
echo "   ‚Ä¢ Tests de seguridad: 3"
echo ""

# Verificar si quedan archivos temporales
if [ -f /tmp/forbidden_response.json ] || [ -f /tmp/noauth_response.json ] || [ -f /tmp/notfound_response.json ]; then
    echo "üßπ Limpiando archivos temporales..."
    rm -f /tmp/forbidden_response.json /tmp/noauth_response.json /tmp/notfound_response.json /tmp/response.json
    echo "‚úÖ Limpieza completada"
fi

echo ""
echo "========================================="
echo "üéâ TESTING COMPLETADO EXITOSAMENTE"
echo "========================================="
echo "El sistema de mensajer√≠a ha sido probado integralmente"
echo "Todos los componentes funcionan seg√∫n las especificaciones"
echo "Las medidas de seguridad est√°n implementadas correctamente"
echo ""

# ========================================
# COMANDOS INDIVIDUALES PARA DESARROLLO
# ========================================

print_section "COMANDOS R√ÅPIDOS PARA DESARROLLO"

echo "üîß COMANDOS INDIVIDUALES PARA COPIAR Y USAR:"
echo ""

echo "# ‚ïê‚ïê‚ïê REGISTRO R√ÅPIDO DE USUARIO INPUT ‚ïê‚ïê‚ïê"
echo 'inputId=$((RANDOM % 1000 + 7000))'
echo 'curl -X POST "http://localhost:3000/api/v1/auth/register" \'
echo '  -H "Content-Type: application/json" \'
echo '  -d "{\"email\":\"input'"'"'${inputId}'"'"'@gamc.gov.bo\",\"password\":\"InputTest123!\",\"firstName\":\"Usuario\",\"lastName\":\"Input'"'"'${inputId}'"'"'\",\"organizationalUnitId\":1,\"role\":\"input\"}"'
echo ''
echo 'inputToken=$(curl -s -X POST "http://localhost:3000/api/v1/auth/login" \'
echo '  -H "Content-Type: application/json" \'
echo '  -d "{\"email\":\"input'"'"'${inputId}'"'"'@gamc.gov.bo\",\"password\":\"InputTest123!\"}" | jq -r ".data.accessToken")'
echo ""

echo "# ‚ïê‚ïê‚ïê CREAR MENSAJE R√ÅPIDO ‚ïê‚ïê‚ïê"
echo 'curl -X POST "http://localhost:3000/api/v1/messages" \'
echo '  -H "Authorization: Bearer $inputToken" \'
echo '  -H "Content-Type: application/json" \'
echo '  -d "{\"subject\":\"Mensaje de prueba\",\"content\":\"Contenido de prueba\",\"receiverUnitId\":2,\"messageTypeId\":1,\"priorityLevel\":2,\"isUrgent\":true}"'
echo ""

echo "# ‚ïê‚ïê‚ïê CONSULTAS B√ÅSICAS ‚ïê‚ïê‚ïê"
echo 'curl -X GET "http://localhost:3000/api/v1/messages/types" -H "Authorization: Bearer $inputToken"'
echo 'curl -X GET "http://localhost:3000/api/v1/messages/statuses" -H "Authorization: Bearer $inputToken"'
echo 'curl -X GET "http://localhost:3000/api/v1/messages" -H "Authorization: Bearer $outputToken"'
echo ""

echo "# ‚ïê‚ïê‚ïê GESTI√ìN DE MENSAJES ‚ïê‚ïê‚ïê"
echo 'curl -X GET "http://localhost:3000/api/v1/messages/1" -H "Authorization: Bearer $outputToken"'
echo 'curl -X PUT "http://localhost:3000/api/v1/messages/1/read" -H "Authorization: Bearer $outputToken"'
echo 'curl -X PUT "http://localhost:3000/api/v1/messages/1/status" \'
echo '  -H "Authorization: Bearer $outputToken" -H "Content-Type: application/json" \'
echo '  -d "{\"status\":\"IN_PROGRESS\"}"'
echo ""

echo "# ‚ïê‚ïê‚ïê ESTAD√çSTICAS (ADMIN) ‚ïê‚ïê‚ïê"
echo 'curl -X GET "http://localhost:3000/api/v1/messages/stats" -H "Authorization: Bearer $adminToken"'
echo ""

echo "üîó Para m√°s informaci√≥n, revisa la documentaci√≥n de la API"
echo "üìö Endpoints disponibles en: http://localhost:3000/api/v1/docs"