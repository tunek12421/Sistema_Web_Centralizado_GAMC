# ========================================
# COMANDOS POWERSHELL - FLUJO RESET DE CONTRASE√ëA
# ========================================

Write-Host "=== üîÑ FLUJO DE RESET DE CONTRASE√ëA ==="

# ========================================
# PREPARACI√ìN: Necesitamos un usuario CON preguntas de seguridad
# ========================================
Write-Host "`n=== PREPARACI√ìN: USUARIO CON PREGUNTAS DE SEGURIDAD ==="

# Registrar nuevo usuario espec√≠fico para reset
$resetUserId = Get-Random -Minimum 5000 -Maximum 9999
$resetUserBody = @{
    email = "resettest$resetUserId@gamc.gov.bo"
    password = "ResetTest123!"
    firstName = "Reset"
    lastName = "Test$resetUserId"
    organizationalUnitId = 1
} | ConvertTo-Json

Write-Host "üîß Registrando usuario para pruebas de reset..."
try {
    $registerResult = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/register" -Method POST -ContentType "application/json" -Body $resetUserBody
    Write-Host "‚úÖ Usuario registrado: resettest$resetUserId@gamc.gov.bo"
    
    # Login con nuevo usuario
    $loginBody = @{
        email = "resettest$resetUserId@gamc.gov.bo"
        password = "ResetTest123!"
    } | ConvertTo-Json
    
    $loginResult = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/login" -Method POST -ContentType "application/json" -Body $loginBody
    $resetToken = $loginResult.data.accessToken
    
    # Configurar preguntas de seguridad para este usuario
    $securityQuestionsBody = @{
        questions = @(
            @{questionId=1; answer="Fluffy"},
            @{questionId=7; answer="Madrid"},
            @{questionId=10; answer="Pizza"}
        )
    } | ConvertTo-Json -Depth 5
    
    Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/security-questions" -Method POST -Headers @{Authorization="Bearer $resetToken"} -ContentType "application/json" -Body $securityQuestionsBody
    Write-Host "‚úÖ Preguntas de seguridad configuradas"
    
    # Hacer logout para simular usuario que olvid√≥ contrase√±a
    Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/logout" -Method POST -Headers @{Authorization="Bearer $resetToken"}
    Write-Host "‚úÖ Usuario deslogueado - listo para reset"
    
} catch {
    Write-Host "‚ùå Error en preparaci√≥n: $($_.Exception.Message)"
    return
}

# ========================================
# 13. SOLICITAR RESET DE CONTRASE√ëA
# ========================================
Write-Host "`n=== 13. SOLICITAR RESET DE CONTRASE√ëA ==="

$forgotPasswordBody = @{
    email = "resettest$resetUserId@gamc.gov.bo"
} | ConvertTo-Json

try {
    $resetResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/forgot-password" -Method POST -ContentType "application/json" -Body $forgotPasswordBody
    Write-Host "‚úÖ Reset solicitado exitosamente"
    Write-Host "Mensaje: $($resetResponse.message)"
    Write-Host "Requiere pregunta: $($resetResponse.data.requiresSecurityQuestion)"
    
    if ($resetResponse.data.securityQuestion) {
        $questionId = $resetResponse.data.securityQuestion.questionId
        $questionText = $resetResponse.data.securityQuestion.questionText
        Write-Host "Pregunta: $questionText"
        Write-Host "ID Pregunta: $questionId"
    }
} catch {
    Write-Host "‚ùå Error en solicitud: $($_.Exception.Message)"
}

# ========================================
# 14. OBTENER ESTADO DE RESET
# ========================================
Write-Host "`n=== 14. OBTENER ESTADO DE RESET ==="

$statusUrl = "http://localhost:3000/api/v1/auth/reset-status?email=resettest$resetUserId@gamc.gov.bo"
try {
    $statusResponse = Invoke-RestMethod -Uri $statusUrl -Method GET
    Write-Host "‚úÖ Estado obtenido:"
    Write-Host "Token v√°lido: $($statusResponse.data.tokenValid)"
    Write-Host "Requiere pregunta: $($statusResponse.data.requiresSecurityQuestion)"
    Write-Host "Pregunta verificada: $($statusResponse.data.securityQuestionVerified)"
    Write-Host "Puede proceder: $($statusResponse.data.canProceedToReset)"
    Write-Host "Intentos restantes: $($statusResponse.data.attemptsRemaining)"
} catch {
    Write-Host "‚ùå Error obteniendo estado: $($_.Exception.Message)"
}

# ========================================
# 15. VERIFICAR PREGUNTA DE SEGURIDAD
# ========================================
Write-Host "`n=== 15. VERIFICAR PREGUNTA DE SEGURIDAD ==="

# Primer intento - respuesta correcta
$verifyCorrectBody = @{
    email = "resettest$resetUserId@gamc.gov.bo"
    questionId = 1  # Primera mascota
    answer = "Fluffy"  # Respuesta correcta que configuramos
} | ConvertTo-Json

try {
    $verifyResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/verify-security-question" -Method POST -ContentType "application/json" -Body $verifyCorrectBody
    Write-Host "‚úÖ Pregunta verificada exitosamente"
    Write-Host "Verificado: $($verifyResponse.data.verified)"
    Write-Host "Puede proceder: $($verifyResponse.data.canProceedToReset)"
    $actualResetToken = $verifyResponse.data.resetToken
    Write-Host "Token obtenido: $($actualResetToken.Substring(0,20))..."
} catch {
    Write-Host "‚ùå Error verificando pregunta: $($_.Exception.Message)"
}

# ========================================
# 16. CONFIRMAR RESET DE CONTRASE√ëA
# ========================================
Write-Host "`n=== 16. CONFIRMAR RESET DE CONTRASE√ëA ==="

if ($actualResetToken) {
    $confirmResetBody = @{
        token = $actualResetToken
        newPassword = "NewResetPass123!"
    } | ConvertTo-Json
    
    try {
        $confirmResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-password" -Method POST -ContentType "application/json" -Body $confirmResetBody
        Write-Host "‚úÖ Reset completado exitosamente"
        Write-Host "Mensaje: $($confirmResponse.message)"
        Write-Host "Nota: $($confirmResponse.data.note)"
    } catch {
        Write-Host "‚ùå Error confirmando reset: $($_.Exception.Message)"
    }
} else {
    Write-Host "‚ö†Ô∏è No se puede confirmar reset sin token v√°lido"
}

# ========================================
# 17. VER HISTORIAL DE RESET (requiere login)
# ========================================
Write-Host "`n=== 17. VER HISTORIAL DE RESET ==="

# Login con nueva contrase√±a para ver historial
$newLoginBody = @{
    email = "resettest$resetUserId@gamc.gov.bo"
    password = "NewResetPass123!"
} | ConvertTo-Json

try {
    $newLogin = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/login" -Method POST -ContentType "application/json" -Body $newLoginBody
    $newToken = $newLogin.data.accessToken
    Write-Host "‚úÖ Login exitoso con nueva contrase√±a"
    
    # Obtener historial
    $historyResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-history" -Method GET -Headers @{Authorization="Bearer $newToken"}
    Write-Host "‚úÖ Historial obtenido:"
    Write-Host "Total tokens: $($historyResponse.data.count)"
    
    if ($historyResponse.data.tokens.Count -gt 0) {
        $lastToken = $historyResponse.data.tokens[0]
        Write-Host "√öltimo reset: $($lastToken.createdAt)"
        Write-Host "IP: $($lastToken.requestIP)"
        Write-Host "Usado en: $($lastToken.usedAt)"
    }
} catch {
    Write-Host "‚ùå Error obteniendo historial: $($_.Exception.Message)"
}

# ========================================
# COMANDOS INDIVIDUALES PARA COPIAR
# ========================================

Write-Host "`n========================================`nCOMANDOS INDIVIDUALES PARA COPIAR:`n========================================"

Write-Host "`n# 1. PREPARACI√ìN - USUARIO CON PREGUNTAS"
Write-Host '$userId = Get-Random -Minimum 5000 -Maximum 9999'
Write-Host '$userBody = @{email="resettest$userId@gamc.gov.bo"; password="ResetTest123!"; firstName="Reset"; lastName="Test$userId"; organizationalUnitId=1} | ConvertTo-Json'
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/register" -Method POST -ContentType "application/json" -Body $userBody'

Write-Host "`n# 2. SOLICITAR RESET"
Write-Host '$resetBody = @{email="resettest$userId@gamc.gov.bo"} | ConvertTo-Json'
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/forgot-password" -Method POST -ContentType "application/json" -Body $resetBody'

Write-Host "`n# 3. ESTADO DE RESET"
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-status?email=resettest$userId@gamc.gov.bo" -Method GET'

Write-Host "`n# 4. VERIFICAR PREGUNTA"
Write-Host '$verifyBody = @{email="resettest$userId@gamc.gov.bo"; questionId=1; answer="Fluffy"} | ConvertTo-Json'
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/verify-security-question" -Method POST -ContentType "application/json" -Body $verifyBody'

Write-Host "`n# 5. CONFIRMAR RESET"
Write-Host '$confirmBody = @{token="TOKEN_OBTENIDO"; newPassword="NewResetPass123!"} | ConvertTo-Json'
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-password" -Method POST -ContentType "application/json" -Body $confirmBody'

Write-Host "`n# 6. HISTORIAL (con nueva contrase√±a)"
Write-Host 'Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-history" -Method GET -Headers @{Authorization="Bearer $newToken"}'

# ========================================
# CASOS DE ERROR PARA PROBAR
# ========================================

Write-Host "`n========================================`nCASOS DE ERROR PARA PROBAR:`n========================================"

Write-Host "`n# Error: Email no institucional"
try {
    $badEmailBody = @{email="test@gmail.com"} | ConvertTo-Json
    Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/forgot-password" -Method POST -ContentType "application/json" -Body $badEmailBody
} catch {
    Write-Host "‚úÖ Error esperado: $($_.Exception.Message)"
}

Write-Host "`n# Error: Respuesta incorrecta a pregunta"
try {
    $wrongAnswerBody = @{email="resettest$resetUserId@gamc.gov.bo"; questionId=1; answer="RespuestaIncorrecta"} | ConvertTo-Json
    Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/verify-security-question" -Method POST -ContentType "application/json" -Body $wrongAnswerBody
} catch {
    Write-Host "‚úÖ Error esperado: $($_.Exception.Message)"
}

Write-Host "`n# Error: Token inv√°lido para reset"
try {
    $badTokenBody = @{token="token_invalido_12345"; newPassword="NewPass123!"} | ConvertTo-Json
    Invoke-RestMethod -Uri "http://localhost:3000/api/v1/auth/reset-password" -Method POST -ContentType "application/json" -Body $badTokenBody
} catch {
    Write-Host "‚úÖ Error esperado: $($_.Exception.Message)"
}

Write-Host "`n========================================`n‚úÖ FLUJO DE RESET DE CONTRASE√ëA COMPLETADO`n========================================"