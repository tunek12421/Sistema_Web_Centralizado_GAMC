# ========================================
# GAMC Sistema Web Centralizado
# Configuración Nginx para MinIO Gateway
# ========================================

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Configuración general
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate max-age=0;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=console:10m rate=5r/s;
    
    # Upstream para MinIO API
    upstream minio_api {
        server minio:9000;
        keepalive 32;
    }
    
    # Upstream para MinIO Console
    upstream minio_console {
        server minio:9001;
        keepalive 32;
    }
    
    # Servidor principal - Gateway para MinIO
    server {
        listen 80;
        server_name localhost;
        
        # Página de inicio personalizada
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        # Proxy para MinIO API
        location /minio/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://minio_api/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            
            # Configuración para uploads grandes
            proxy_connect_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            
            # Headers de CORS para desarrollo
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Range, Content-Type' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Range, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Proxy para MinIO Console
        location /console/ {
            limit_req zone=console burst=10 nodelay;
            
            proxy_pass http://minio_console/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
        }
        
        # Acceso directo a buckets públicos
        location /public/ {
            proxy_pass http://minio_api/;
            proxy_set_header Host $http_host;
            
            # Cache para recursos estáticos
            location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
                proxy_pass http://minio_api;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header 'Access-Control-Allow-Origin' '*';
            }
        }
        
        # Health check
        location /health {
            access_log off;
            proxy_pass http://minio_api/minio/health/live;
            proxy_set_header Host $http_host;
        }
        
        # Status page personalizada
        location /status {
            root /usr/share/nginx/html;
            try_files /status.html =404;
        }
        
        # Bloquear acceso a archivos sensibles
        location ~ /\.ht {
            deny all;
        }
        
        location ~ /\.git {
            deny all;
        }
        
        # Error pages personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Servidor para monitoreo (opcional)
    server {
        listen 8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Metrics endpoint
        location /metrics {
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 10.0.0.0/8;
            deny all;
            
            content_by_lua_block {
                local metrics = {}
                table.insert(metrics, '# HELP nginx_connections_total Total connections')
                table.insert(metrics, '# TYPE nginx_connections_total counter')
                table.insert(metrics, 'nginx_connections_total ' .. ngx.var.connections_reading)
                ngx.say(table.concat(metrics, '\n'))
            }
        }
    }
}